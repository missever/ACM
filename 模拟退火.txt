clock_t tic;
double get_time() {
    return 1.0 * (clock() - tic) / CLOCKS_PER_SEC;
}
inline double Rand() {
    return 2.0 * rand() / RAND_MAX - 1.0;
}

void solve() {
    double pre_ans,best_ans;
    while (get_time() < 4.9) {
        // 初始温度  降温系数
        double T = 100, T_decay = 0.95;
        // 马尔可夫链个数 链长度
        const int max_iter = 1000, chain_len = 300;
        for (int i = 0; get_time() < 4.9 && i < max_iter; ++i, T *= T_decay) {
            for (int j = 0; get_time() < 4.9 && j < chain_len; ++j) {
		// 随机改变
                ?????
                
                double now_ans;
                double deltaS = now_ans - pre_ans;
                // 一定概率内可以接受更差的情况
                if (deltaS > 0 || exp(deltaS * T) < Rand()) {
                    pre_ans = now_ans;
                    if (now_ans > best_ans) {//更新最优解
                        best_ans = now_ans;
                    }
                }
            }
        }
    }
}

int main() {
    tic = clock();
    srand(time(0));
}
